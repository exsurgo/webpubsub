{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A .NET PubSub Server for Real-Time Web Applications","body":"WebPubSub is a websocket-based PubSub server that can be integrated with an ASP.NET application.  The library allows you to easily convert a traditional web application into a live-collaboration platform.  Some of the possibilities include instant messaging, chat, live alerts, real-time feeds and concurrency management.\r\n\r\n* **Real-Time Communication in ASP.NET Apps**\r\n* **JavaScript Client Included**\r\n* **Easy to Use PubSub Pattern**\r\n* **Integration with Forms Authentication**\r\n* **Flash Socket Policy Server**\r\n\r\n### Chat Sample\r\nThe most common sample usage of real-time apps is the chat example. The following chat sample illustrates how four separate users with four separate browsers can connect in real-time.  The browsers below are Chrome, FireFox, Safari and IE8 (using Flash fallback).\r\n![WebPubSub Chat](http://github.com/exsurgo/webpubsub/blob/master/Samples/Images/Chat.jpg?raw=true)\r\n\r\n### Concurrency Sample\r\nAnother compelling usage is concurrency management. In the following example, if multiple users are editing the same record, all users are aware of it.  If a user focuses on a field, the field is locked for the rest of the users.  When the fields is blurred, then value is synced in all other forms. \r\n![WebPubSub Chat](http://github.com/exsurgo/webpubsub/blob/master/Samples/Images/Concurrency.jpg?raw=true)\r\n\r\n### JavaScript Client\r\nThe following code demonstrates the usage from the JavaScript client. \r\n\r\n```javascript\r\n//Open connection\r\nPubSub.open(function () {\r\n\r\n    //Create a channel, Can be any string\r\n    var channel = \"my-channel\";\r\n\r\n    //Subscribe to the channel\r\n    //\"this\" keyword refers to PubSub object\r\n    this.subscribe(channel, function (data) {\r\n\r\n    });\r\n\r\n    //Unsubscribe to the channel\r\n    this.unsubscribe(channel);\r\n\r\n    //Query other users subscribed to the channel\r\n    this.query(channel, function (otherUsers) {\r\n\r\n    });\r\n\r\n    //Another user has connected to the channel\r\n    this.connect(channel, function (user) {\r\n        alert(\"User has id \" + user.id + \" and name \" + user.name);\r\n    });\r\n\r\n    //Another user has disconnected from the channel\r\n    this.disconnect(channel, function (user) {\r\n\r\n    });\r\n\r\n    //Publish a message to the channel\r\n    this.publish(channel, \"Hello World\");\r\n\r\n    //Can publish strings or objects\r\n    this.publish(channel, { id: 123, value: \"Another Message\" });\r\n\r\n});\r\n```\r\n\r\n### Server-Side Installation\r\nFor installing WebPubSub on the server, you just need to include the dependencies, add the config settings and call the start and stop methods in the Global.asax file.\r\n\r\n_Web.config_\r\n```xml\r\n    <appSettings>\r\n        <!--WebPubSub Settings-->\r\n        <add key=\"PubSubPort\" value=\"8765\" />\r\n        <add key=\"PubSubEnableSecurity\" value=\"false\" />\r\n        <add key=\"PubSubCertPath\" value=\"~/localhost.pfx\" />\r\n        <add key=\"PubSubCertPassword\" value=\"localhost\" />\r\n        <add key=\"PubSubEnableFlashPolicyServer\" value=\"true\" />\r\n    </appSettings>\r\n```\r\n_Global.asax_\r\n```c#\r\n        protected void Application_Start()\r\n        {\r\n            //Start WebPubSub server\r\n            PubSub.StartServer();\r\n        }\r\n\r\n        protected void Application_End()\r\n        {\r\n            //Stop WebPubSub server\r\n            PubSub.StopServer();\r\n        }\r\n    }\r\n```\r\n\r\n### Server-Side Calls\r\nYou can also interact with the system server-side code.  The following message is sent from the server using C# and is received by the JavaScript client.\r\n\r\n```c#\r\npublic void SendMessage()\r\n{\r\n    //Publish message to channel\r\n    PubSub.Publish(\"my-channel\", new { id = 123, value = \"Some Text\" });\r\n}\r\n```\r\n\r\n### Authentication\r\nBy default, WebPubSub integrates with ASP.NET forms authentication. When a user is logged in, the _User.Identity.Name_ value is the unique ID of the user. _FormsAuthenticationTicket.UserData_ is the user's friendly name.\r\n\r\n```c#\r\n//Create authentication cookie \r\nHttpCookie authCookie = FormsAuthentication.GetAuthCookie(userIdentity, false);\r\n//Important: Needed for flash websocket fallback\r\nauthCookie.HttpOnly = false;\r\n//Create authentication ticket\r\nFormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(authCookie.Value);\r\n//Store name in user data\r\nFormsAuthenticationTicket newTicket = new FormsAuthenticationTicket(\r\n    ticket.Version, \r\n    ticket.Name, \r\n    ticket.IssueDate, \r\n    ticket.Expiration, \r\n    ticket.IsPersistent, \r\n    userName);\r\n//Encrypt and add to response\r\nauthCookie.Value = FormsAuthentication.Encrypt(newTicket);\r\nResponse.Cookies.Add(authCookie);\r\n```\r\n\r\n### Support for Older Browsers\r\nThough most modern browsers support websockets natively, older browsers such as IE do not.  However, you can support these browsers by using Flash as a fallback mechanism.   An excellent shim that uses Flash is the [web-socket-js](https://github.com/gimite/web-socket-js), which is included in the sample.  WebPubSub also includes a Flash socket policy server, which is a security requirement for Flash clients to use websockets.\r\nYou also need support for the JSON.stringify() and JSON.parse() methods.  The sample uses the [JSON3](http://bestiejs.github.com/json3/) shim.\r\n\r\n### Dependencies\r\nThe library uses the excellent [SuperWebSocket](http://superwebsocket.codeplex.com/) library, a .NET websocket server. \r\n\r\n***\r\n\r\nCreated and maintained by [Sterling Nichols](http://linkedin.com/in/sterlingnichols).","name":"WebPubSub"}